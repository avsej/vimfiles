if (($term == "rxvt-unicode") || ($term =~ "xterm") || ($term =~ "screen")) && (&termencoding == "")
    set termencoding=utf-8
endif

set nocompatible

if has('eval')
    let mapleader=","
end

if has("gui_running")
    colorscheme default
    set background=light
    set guicursor=a:blinkwait0,a:block-cursor
    set guifont=DejaVu\ Sans\ Mono\ 8
    set guioptions-=mtTlr
endif

if has("extra_search")
    "set hlsearch
    set incsearch
    set gdefault
end

if has("persistent_undo")
    set undodir=~/.vim/tmp/undo
    set undofile
endif

" tabs/spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" abbreviations
inoreabbrev didnt didn't
inoreabbrev doesnt doesn't
inoreabbrev dont don't
inoreabbrev fro for
inoreabbrev Im I'm
inoreabbrev shoudl should
inoreabbrev teh the
inoreabbrev yuo you
inoreabbrev yeild yield
inoreabbrev yeilds yields
inoreabbrev desing design
inoreabbrev cdate2822 <c-r>=strftime("%a, %d %b %Y %H:%M:%S %z")<cr>
inoreabbrev cdate8601 <c-r>=strftime("%Y-%m-%d")<cr>
inoreabbrev tstamp <c-r>=strftime("%Y-%m-%d %H:%M:%S")<cr><cr>===================

" mappings
set pastetoggle=<f12>
set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,б\\,,ю.,ё`,ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х{,Ъ},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж:,Э\\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б<,Ю>,Ё~
vnoremap < <gv
vnoremap > >gv
vnoremap <silent> j gj
vnoremap <silent> k gk
nnoremap <silent> j gj
nnoremap <silent> k gk

nnoremap <M-p> :bp <CR>
nnoremap <M-n> :bn <CR>
nnoremap <C-t> xph
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>
vnoremap <up> <nop>
inoremap <down> <esc>
inoremap <left> <esc>
inoremap <right> <esc>
inoremap <up> <esc>
inoremap kj <esc>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <up> <nop>
nnoremap Y y$
nnoremap <silent> <c-n> :set invhlsearch<cr>
nnoremap Q <nop>
inoremap <f1> <nop>
vnoremap <f1> <nop>
nnoremap <f1> <nop>
cnoremap <c-a> <home>

nnoremap <c-w><c-e> :copen<cr>

" formatting
set autoindent smartindent smarttab
set formatoptions=cowrqn
set whichwrap+=<,>,[,]
set nowrap
set linebreak
set textwidth=76
set backspace=indent,eol,start
set comments=sr:/*,mb:\ *,el:*/,://,b:;,b:#,:%,:xcomm,n:>,n:),fb:-
" set number
set nrformats=hex

" formats
set encoding=utf-8
set fileencodings=utf-8,koi8-r,cp1251,cp866,iso-8859-15
set fileformat=unix
set printencoding=utf8

" display
set nofoldenable
set lazyredraw
set list
" set listchars=tab:\ \ ,trail:·
set listchars=tab:>-,trail:·

set ruler
set rulerformat=%30(%=%y\ %c,%l\ %P%)
set scrolloff=0
set sidescrolloff=0
set showcmd
set shortmess=atT
set title
set winminheight=1
set noerrorbells
set splitbelow splitright
set cpoptions=$
set wildignore=*.o,*.obj,*~,.svn,CVS,.git,.hg,*.a
set wildmenu
set wildmode=list:longest
set noshowmatch
highlight pmenu ctermbg=white
highlight pmenusel ctermfg=white ctermbg=black
highlight specialkey ctermfg=red
highlight DiffAdd       ctermfg=green    ctermbg=white cterm=NONE
highlight DiffChange    ctermfg=green     ctermbg=white cterm=NONE
highlight DiffText      ctermfg=black    ctermbg=white cterm=NONE
highlight DiffDelete    ctermfg=red      ctermbg=white cterm=NONE

"   highlight DiffAdd term=reverse cterm=bold ctermbg=green ctermfg=white
"   highlight DiffChange term=reverse cterm=bold ctermbg=cyan ctermfg=black
"   highlight DiffText term=reverse cterm=bold ctermbg=gray ctermfg=black
"   highlight DiffDelete term=reverse cterm=bold ctermbg=red ctermfg=black

" C settings
"let c_comment_strings=1
"let c_comment_numbers=1
"let c_comment_types=1
"let c_cpp_comments=1
let c_C99=1
let c_c_vim_compatible=1
"let c_comment_date_time=1
let c_warn_nested_comments=1
let c_ansi_typedefs=1
let c_ansi_constants=1
let c_posix=1
let c_minlines=25
let c_C89=1
let c_gnu=1
let c_syntax_for_h=1

set printexpr=PrintFile(v:fname_in)
function PrintFile(fname)
    call system("lp " . a:fname)
    call delete(a:fname)
    return v:shell_error
endfunc

" system
set clipboard=unnamedplus,unnamed
set virtualedit=
set modeline
set ttyfast
set autowrite
set printoptions=paper:a4,wrap:y,syntax:n,formfeed:y
set backupdir=~/.vim/tmp/backup
set directory=~/.vim/tmp/swap
set backup
set grepprg=grep\ -nsHRI\ $*
set hidden
set history=128
set joinspaces
set sessionoptions=curdir,buffers
set shiftround
set viminfo=<1000,s100,'1000,f1,:1000,/1000,n~/.vim/.viminfo
set autoread

filetype on
filetype plugin on
filetype indent on
syntax enable

autocmd BufNewFile,BufRead *.sls                            setlocal ft=scheme
autocmd BufNewFile,BufRead *.ru,Rakefile,Gemfile,Capfile    setlocal ft=ruby
autocmd BufNewFile,BufRead *.html                           setlocal ts=4 sw=4
autocmd FileType markdown                                   setlocal tw=72 ts=2 sw=2 et wrap
autocmd FileType ruby,javascript                            setlocal sts=2 ts=2 sw=2 et nu
autocmd FileType ruby                                       setlocal makeprg=rake
autocmd FileType tex                                        setlocal sts=2 ts=2 sw=2 et wrap
autocmd FileType pod                                        setlocal spell
autocmd FileType c,cpp                                      setlocal ts=8 sw=8 sts=4 noet

" Transparent editing of gpg encrypted files.
" By Wouter Hanegraaff
augroup encrypted
    au!

    " First make sure nothing is written to ~/.viminfo while editing
    " an encrypted file.
    autocmd BufReadPre,FileReadPre *.gpg set viminfo=
    " We don't want a swap file, as it writes unencrypted data to disk
    autocmd BufReadPre,FileReadPre *.gpg set noswapfile
    " Switch to binary mode to read the encrypted file
    autocmd BufReadPre,FileReadPre *.gpg set bin
    autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
    autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2> /dev/null
    " Switch to normal mode for editing
    autocmd BufReadPost,FileReadPost *.gpg set nobin
    autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
    autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")

    " Convert all text to encrypted text before writing
    autocmd BufWritePre,FileWritePre *.gpg '[,']!gpg --default-recipient-self -ae 2>/dev/null
    " Undo the encryption so we are back in the normal text, directly
    " after the file has been written.
    autocmd BufWritePost,FileWritePost *.gpg u
augroup END

autocmd BufReadPost *
            \ if line("'\"") > 1 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif
autocmd BufNewFile * silent! 0r ~/.vim/skel/template.%:e
autocmd BufWritePre *
            \ if !exists("b:keep_trailing_spaces")  |
            \   :%s/\s\+$//e                        |
            \ endif

if &diff
    filetype off
endif

let g:tex_no_error = 0
let g:c_syntax_for_h = 1
"let g:gist_private = 1

" vim:ft=vim:
