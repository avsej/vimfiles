if (($term == "rxvt-unicode") || ($term =~ "xterm") || ($term =~ "screen")) && (&termencoding == "")
    set termencoding=utf-8
endif

set nocompatible

if has('eval')
    let mapleader=","
end

if has("gui_running")
    colorscheme default
    set background=light
    set guicursor=a:blinkwait0,a:block-cursor
    set guifont=DejaVu\ Sans\ Mono\ 8
    set guioptions-=mtTlr
endif

if has("extra_search")
    "set hlsearch
    set incsearch
    set gdefault
end

if has("persistent_undo")
    set undodir=~/.vim/tmp/undo
    set undofile
endif

" tabs/spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" abbreviations
inoreabbrev didnt didn't
inoreabbrev doesnt doesn't
inoreabbrev dont don't
inoreabbrev fro for
inoreabbrev Im I'm
inoreabbrev shoudl should
inoreabbrev teh the
inoreabbrev yuo you
inoreabbrev yeild yield
inoreabbrev yeilds yields
inoreabbrev cdate <c-r>=strftime("%Y-%m-%d")<cr>

" mappings
set pastetoggle=<f12>
set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,б\\,,ю.,ё`,ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х{,Ъ},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж:,Э\\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б<,Ю>,Ё~
vnoremap < <gv
vnoremap > >gv
vmap <silent> j gj
vmap <silent> k gk
nmap <silent> j gj
nmap <silent> k gk

vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>
vnoremap <up> <nop>
inoremap <down> <esc>
inoremap <left> <esc>
inoremap <right> <esc>
inoremap <up> <esc>
inoremap kj <esc>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <up> <nop>
nnoremap Y y$
nnoremap <silent> <c-n> :set invhlsearch<cr>
nnoremap Q <nop>
inoremap <f1> <nop>
vnoremap <f1> <nop>
nnoremap <f1> <nop>
"   inoremap () ()<left>
"   inoremap [] []<left>
"   inoremap '' ''<left>
"   inoremap "" ""<left>

nnoremap <c-w><c-e> :copen<cr>

" formatting
set autoindent smartindent
set smarttab
set formatoptions=wrqn
set whichwrap+=<,>,[,]
set nowrap
set linebreak
set textwidth=76
set backspace=indent,eol,start
set comments=sr:/*,mb:\ *,el:*/,://,b:#,:%,:xcomm,n:>,n:),fb:-
" set number

" formats
set encoding=utf-8
set fileencodings=utf-8,japan,koi8-r,cp1251,cp866,iso-8859-15
set fileformat=unix
set printencoding=utf8

set printexpr=PrintFile(v:fname_in)
function PrintFile(fname)
    call system("lp " . a:fname)
    call delete(a:fname)
    return v:shell_error
endfunc

" display
set nofoldenable
set lazyredraw
set list
set listchars=tab:\ \ ,trail:·

set ruler
set rulerformat=%30(%=%y\ %c,%l\ %P%)
set scrolloff=0
set sidescrolloff=0
set showcmd
set shortmess=atT
set title
set winminheight=1
set noerrorbells
set splitbelow
set cpoptions=$
set wildignore=*.o,*.obj,*~,.svn,CVS,.git,.hg,*.a
set wildmenu
set wildmode=list:longest
set noshowmatch
highlight pmenu ctermbg=white
highlight pmenusel ctermfg=white ctermbg=black
highlight specialkey ctermfg=red

" system
set virtualedit=
set modeline
set ttyfast
set autowrite
set printoptions=paper:a4,wrap:y,syntax:n,formfeed:y
set backupdir=~/.vim/tmp/backup
set directory=~/.vim/tmp/swap
set backup
set grepprg=grep\ -nHRI\ $*
set hidden
set history=128
set joinspaces
set sessionoptions=curdir,buffers
set shiftround
set viminfo=<1000,s100,'1000,f1,:1000,/1000,n~/.vim/.viminfo
set autoread

filetype on
filetype plugin on
filetype indent on
syntax enable

autocmd BufNewFile,BufRead *.sls    set ft=scheme
autocmd BufNewFile,BufRead *.ru,Rakefile,Gemfile,Capfile    set ft=ruby
autocmd BufNewFile,BufRead *.html   set ts=4 sw=4
autocmd FileType markdown           set tw=72 ts=2 sw=2 et wrap
autocmd FileType ruby,javascript    set sts=2 ts=2 sw=2 et nu
autocmd FileType tex                set sts=2 ts=2 sw=2 et wrap
autocmd FileType pod                set spell
"autocmd FileType c,cpp              set ts=2 et sts=2 sw=2
autocmd FileType c,cpp              set ts=8 sw=8 sts=4 noet

" Transparent editing of gpg encrypted files.
" By Wouter Hanegraaff
augroup encrypted
    au!

    " First make sure nothing is written to ~/.viminfo while editing
    " an encrypted file.
    autocmd BufReadPre,FileReadPre *.gpg set viminfo=
    " We don't want a swap file, as it writes unencrypted data to disk
    autocmd BufReadPre,FileReadPre *.gpg set noswapfile
    " Switch to binary mode to read the encrypted file
    autocmd BufReadPre,FileReadPre *.gpg set bin
    autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
    autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2> /dev/null
    " Switch to normal mode for editing
    autocmd BufReadPost,FileReadPost *.gpg set nobin
    autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
    autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")

    " Convert all text to encrypted text before writing
    autocmd BufWritePre,FileWritePre *.gpg '[,']!gpg --default-recipient-self -ae 2>/dev/null
    " Undo the encryption so we are back in the normal text, directly
    " after the file has been written.
    autocmd BufWritePost,FileWritePost *.gpg u
augroup END

autocmd BufReadPost *
            \ if line("'\"") > 1 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif
autocmd BufNewFile * silent! 0r ~/.vim/skel/template.%:e
autocmd BufWritePre * :%s/\s\+$//e
let g:tex_no_error = 0
let g:c_syntax_for_h = 1
"let g:gist_private = 1

" vim:ft=vim:
